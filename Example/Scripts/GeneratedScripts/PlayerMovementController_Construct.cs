using RPGCore.AI.HFSM;
//Automatically generated code
[StateMachineController(ControllerName = "PlayerMovementController")]
public partial class PlayerMovementController : StateMachineScriptController
{
	public override StateMachine ConstructStateMachine()
	{
		StateMachineHandler.BeginStateMachine(this, "Root")
			.AddService("ProcessInput",ServiceType.Update,0).OnService(on_ProcessInput_service)
			.AddService("CheckGetHit",ServiceType.FixedUpdate,0).OnService(on_CheckGetHit_service)
			.AddStateMachine("normal", true)
				.AddService("ProcessTalk",ServiceType.Update,0).OnService(on_ProcessTalk_service)
				.AddState("normal_idle", true).OnExecute(on_normal_idle_execute)
				.AddState("normal_walk", false).OnExecute(on_normal_walk_execute)
				.AddTemporaryState("normal_talk").OnExecute(on_normal_talk_execute)
					.CanExit(can_normal_talk_exit)
				.SwitchHandle("normal_idle").ToState("normal_walk",false)
					.BoolCondition("IsWalk",true)
				.SwitchHandle("normal_walk").ToState("normal_idle",false)
					.BoolCondition("IsIdle",true)
				.SwitchHandle("Any").ToState("normal_talk",true)
					.TriggerCondition("Talk")
				.FinishHandle()
			.AddStateMachine("battle", false)
				.AddService("ProcessRollOrDodge",ServiceType.Update,0).OnService(on_ProcessRollOrDodge_service)
				.AddService("ProcessAttack",ServiceType.Update,0).OnService(on_ProcessAttack_service)
				.AddStateMachine("battle_look_to_target", false)
					.AddService("FaceToTarget",ServiceType.Update,0).OnService(on_FaceToTarget_service)
					.AddState("look_to_target_idle", true).OnExecute(on_look_to_target_idle_execute)
					.AddState("look_to_target_walk", false).OnExecute(on_look_to_target_walk_execute)
					.AddState("dodge", false).OnExecute(on_dodge_execute)
						.CanExit(can_dodge_exit)
					.SwitchHandle("dodge").ToState("look_to_target_idle",false)
					.SwitchHandle("look_to_target_idle").ToState("look_to_target_walk",false)
						.BoolCondition("IsWalk",true)
					.SwitchHandle("look_to_target_walk").ToState("look_to_target_idle",false)
						.BoolCondition("IsIdle",true)
					.SwitchHandle("look_to_target_walk").ToState("dodge",false)
						.TriggerCondition("RollOrDodge")
					.FinishHandle()
				.AddStateMachine("battle_free_view", true)
					.AddState("free_view_idle", true).OnExecute(on_free_view_idle_execute)
					.AddState("free_view_run", false).OnExecute(on_free_view_run_execute)
					.AddState("roll", false).OnExecute(on_roll_execute)
						.CanExit(can_roll_exit)
					.AddState("free_view_sprint", false).OnExecute(on_free_view_sprint_execute)
					.SwitchHandle("free_view_idle").ToState("free_view_run",false)
						.BoolCondition("IsWalk",true)
					.SwitchHandle("free_view_idle").ToState("roll",false)
						.TriggerCondition("RollOrDodge")
					.SwitchHandle("free_view_run").ToState("roll",false)
						.TriggerCondition("RollOrDodge")
					.SwitchHandle("roll").ToState("free_view_idle",false)
					.SwitchHandle("free_view_run").ToState("free_view_idle",false)
						.BoolCondition("IsIdle",true)
					.SwitchHandle("free_view_run").ToState("free_view_sprint",false)
						.BoolCondition("IsRun",true)
					.SwitchHandle("free_view_sprint").ToState("roll",false)
						.TriggerCondition("RollOrDodge")
					.SwitchHandle("free_view_sprint").ToState("free_view_run",false)
						.BoolCondition("IsWalk",true)
						.BoolCondition("IsRun",false)
					.SwitchHandle("free_view_sprint").ToState("free_view_idle",false)
						.BoolCondition("IsIdle",true)
					.SwitchHandle("free_view_idle").ToState("free_view_sprint",false)
						.BoolCondition("IsWalk",true)
						.BoolCondition("IsRun",true)
					.FinishHandle()
				.AddTemporaryState("attack").OnExecute(on_attack_execute)
					.CanExit(can_attack_exit)
				.SwitchHandle("battle_look_to_target").ToStateMachine("battle_free_view")
					.BoolCondition("IsLookToTarget",false)
				.SwitchHandle("battle_free_view").ToStateMachine("battle_look_to_target")
					.BoolCondition("IsLookToTarget",true)
				.SwitchHandle("Any").ToState("attack",true)
					.TriggerCondition("Attack")
				.FinishHandle()
			.AddTemporaryState("get_hit").OnExecute(on_get_hit_execute)
				.CanExit(can_get_hit_exit)
			.SwitchHandle("normal").ToStateMachine("battle")
				.BoolCondition("IsOnBattle",true)
			.SwitchHandle("Any").ToState("get_hit",true)
				.TriggerCondition("GetHit")
			.SwitchHandle("battle").ToStateMachine("normal")
				.BoolCondition("IsOnBattle",false)
			.FinishHandle()
			.EndHandle();
		return StateMachineHandler.EndStateMachine();
	}
}
